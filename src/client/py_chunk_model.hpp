#ifndef PY_CHUNK_MODEL_HPP
#define PY_CHUNK_MODEL_HPP

#include "pyscript/pyobject_plus.hpp"
#include "pyscript/script.hpp"

BW_BEGIN_NAMESPACE

class Chunk;
class ChunkModel;

/*~ class BigWorld.PyChunkModel
 *
 *	NOTE:  This class has been deprecated - Use a static PyModelObstacle instead
 *
 *  A PyChunkModel is a PyObjectPlus wrapper around a simple model which is
 *  treated by BigWorld as a part of the level geometry. It can be used to
 *  dynamically place objects such as buildings in the world. These objects
 *  can be created and deleted, but not modified. Instances of
 *  this class are generated by the BigWorld.PyChunkModel factory method,
 *  as in the following example:
 *
 *  @{
 *  # Import Math library
 *  import Math
 *
 *  # Place a PyChunkModel in the world at ( 0, 10, 0 )
 *  modelName = "objects\models\items\Trees & Plants\oak4.model"
 *  matrix = Math.Matrix()
 *  matrix.setTranslate( ( 0, 10, 0 ) )
 *  newPyChunkModel = BigWorld.PyChunkModel( modelName, $p.spaceID, matrix )
 *
 *  # now remove it
 *  del( newPyChunkModel )
 *  @}
 *
 *  PyChunkModel instances are not returned by BigWorld.chunkInhabitant.
 */
/**
 *	This class allows scripts to place a chunk model in the world.
 *	Should be part of a whole group of classes, allowing access to
 *	other scene graph infomation.
 */
class PyChunkModel : public PyObjectPlus
{
    Py_Header(PyChunkModel, PyObjectPlus)

      public
      : PyChunkModel(ChunkModel*   pModel,
                     Chunk*        pChunk,
                     PyTypeObject* pType = &PyChunkModel::s_type_);
    virtual ~PyChunkModel();

    PY_FACTORY_DECLARE()

  private:
    SmartPointer<ChunkModel> pCM_;
};

BW_END_NAMESPACE

#endif // PY_CHUNK_MODEL_HPP
